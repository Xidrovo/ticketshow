// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package microservice is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Evento
	RequestEvento
	PingRequest
	PingReply
*/
package microservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Evento struct {
	ID      int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Sede    int64  `protobuf:"varint,2,opt,name=Sede" json:"Sede,omitempty"`
	Creador int64  `protobuf:"varint,3,opt,name=Creador" json:"Creador,omitempty"`
	Inicio  string `protobuf:"bytes,4,opt,name=Inicio" json:"Inicio,omitempty"`
	Fin     string `protobuf:"bytes,5,opt,name=Fin" json:"Fin,omitempty"`
	Valor   string `protobuf:"bytes,6,opt,name=Valor" json:"Valor,omitempty"`
}

func (m *Evento) Reset()                    { *m = Evento{} }
func (m *Evento) String() string            { return proto.CompactTextString(m) }
func (*Evento) ProtoMessage()               {}
func (*Evento) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Evento) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Evento) GetSede() int64 {
	if m != nil {
		return m.Sede
	}
	return 0
}

func (m *Evento) GetCreador() int64 {
	if m != nil {
		return m.Creador
	}
	return 0
}

func (m *Evento) GetInicio() string {
	if m != nil {
		return m.Inicio
	}
	return ""
}

func (m *Evento) GetFin() string {
	if m != nil {
		return m.Fin
	}
	return ""
}

func (m *Evento) GetValor() string {
	if m != nil {
		return m.Valor
	}
	return ""
}

type RequestEvento struct {
}

func (m *RequestEvento) Reset()                    { *m = RequestEvento{} }
func (m *RequestEvento) String() string            { return proto.CompactTextString(m) }
func (*RequestEvento) ProtoMessage()               {}
func (*RequestEvento) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PingRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Evento)(nil), "microservice.Evento")
	proto.RegisterType((*RequestEvento)(nil), "microservice.RequestEvento")
	proto.RegisterType((*PingRequest)(nil), "microservice.PingRequest")
	proto.RegisterType((*PingReply)(nil), "microservice.PingReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Micro service

type MicroClient interface {
	// rpc Ping (PingRequest) returns (PingReply) {}
	GetEventos(ctx context.Context, in *RequestEvento, opts ...grpc.CallOption) (Micro_GetEventosClient, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) GetEventos(ctx context.Context, in *RequestEvento, opts ...grpc.CallOption) (Micro_GetEventosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Micro_serviceDesc.Streams[0], c.cc, "/microservice.Micro/GetEventos", opts...)
	if err != nil {
		return nil, err
	}
	x := &microGetEventosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Micro_GetEventosClient interface {
	Recv() (*Evento, error)
	grpc.ClientStream
}

type microGetEventosClient struct {
	grpc.ClientStream
}

func (x *microGetEventosClient) Recv() (*Evento, error) {
	m := new(Evento)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Micro service

type MicroServer interface {
	// rpc Ping (PingRequest) returns (PingReply) {}
	GetEventos(*RequestEvento, Micro_GetEventosServer) error
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_GetEventos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestEvento)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroServer).GetEventos(m, &microGetEventosServer{stream})
}

type Micro_GetEventosServer interface {
	Send(*Evento) error
	grpc.ServerStream
}

type microGetEventosServer struct {
	grpc.ServerStream
}

func (x *microGetEventosServer) Send(m *Evento) error {
	return x.ServerStream.SendMsg(m)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.Micro",
	HandlerType: (*MicroServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventos",
			Handler:       _Micro_GetEventos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x4d, 0xbb, 0x46, 0x7a, 0x74, 0x2a, 0x87, 0x21, 0x41, 0x6f, 0x46, 0x40, 0xdc, 0x55,
	0x11, 0x7d, 0x84, 0x4d, 0xa5, 0xa0, 0x20, 0x11, 0xbc, 0xaf, 0xdd, 0x61, 0x04, 0xb6, 0x64, 0x26,
	0xb5, 0xe0, 0x0b, 0xf8, 0xdc, 0xd2, 0x34, 0x05, 0x7b, 0xb1, 0xbb, 0xf3, 0x7f, 0x39, 0x70, 0xbe,
	0xfc, 0x30, 0xf5, 0xe4, 0x5a, 0x5d, 0x53, 0xb1, 0x77, 0xb6, 0xb1, 0x78, 0xba, 0xd3, 0xb5, 0xb3,
	0x91, 0xc9, 0x5f, 0x06, 0xfc, 0xb1, 0x25, 0xd3, 0x58, 0x3c, 0x83, 0xa4, 0x5c, 0x09, 0x36, 0x67,
	0x8b, 0x54, 0x25, 0xe5, 0x0a, 0x11, 0x26, 0xef, 0xb4, 0x26, 0x91, 0x04, 0x12, 0x66, 0x14, 0x70,
	0xbc, 0x74, 0x54, 0xad, 0xad, 0x13, 0x69, 0xc0, 0x43, 0xc4, 0x4b, 0xe0, 0xa5, 0xd1, 0xb5, 0xb6,
	0x62, 0x32, 0x67, 0x8b, 0x5c, 0xc5, 0x84, 0x17, 0x90, 0x3e, 0x69, 0x23, 0xb2, 0x00, 0xbb, 0x11,
	0x67, 0x90, 0x7d, 0x54, 0x5b, 0xeb, 0x04, 0x0f, 0xac, 0x0f, 0xf2, 0x1c, 0xa6, 0x8a, 0xbe, 0xbe,
	0xc9, 0x37, 0xbd, 0x8e, 0xbc, 0x85, 0x93, 0x37, 0x6d, 0x36, 0x11, 0x76, 0x97, 0x77, 0xe4, 0x7d,
	0xb5, 0xa1, 0xa0, 0x98, 0xab, 0x21, 0xca, 0x1b, 0xc8, 0xfb, 0xc5, 0xfd, 0xf6, 0xe7, 0xf0, 0xda,
	0xfd, 0x0b, 0x64, 0xaf, 0xdd, 0xcf, 0x71, 0x09, 0xf0, 0x4c, 0xf1, 0x8a, 0xc7, 0xeb, 0xe2, 0x7f,
	0x1f, 0xc5, 0xc8, 0xe1, 0x6a, 0x36, 0x7e, 0x8c, 0x66, 0x47, 0x77, 0xec, 0x93, 0x87, 0x32, 0x1f,
	0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x69, 0x10, 0xcb, 0xfe, 0x5d, 0x01, 0x00, 0x00,
}
